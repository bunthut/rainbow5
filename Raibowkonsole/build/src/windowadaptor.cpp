/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Source file was org.kde.konsole.Window.xml
 *
 * qdbusxml2cpp is Copyright (C) The Qt Company Ltd. and other contributors.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "windowadaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class WindowAdaptor
 */

WindowAdaptor::WindowAdaptor(Konsole::ViewManager *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

WindowAdaptor::~WindowAdaptor()
{
    // destructor
}

bool WindowAdaptor::createSplit(int viewId, bool horizontalSplit)
{
    // handle method call org.kde.konsole.Window.createSplit
    return parent()->createSplit(viewId, horizontalSplit);
}

bool WindowAdaptor::createSplitWithExisting(int targetSplitterId, const QStringList &widgetInfos, int idx, bool horizontalSplit)
{
    // handle method call org.kde.konsole.Window.createSplitWithExisting
    return parent()->createSplitWithExisting(targetSplitterId, widgetInfos, idx, horizontalSplit);
}

int WindowAdaptor::currentSession()
{
    // handle method call org.kde.konsole.Window.currentSession
    return parent()->currentSession();
}

QString WindowAdaptor::defaultProfile()
{
    // handle method call org.kde.konsole.Window.defaultProfile
    return parent()->defaultProfile();
}

QList<double> WindowAdaptor::getSplitProportions(int splitterId)
{
    // handle method call org.kde.konsole.Window.getSplitProportions
    return parent()->getSplitProportions(splitterId);
}

void WindowAdaptor::loadLayout(const QString &File)
{
    // handle method call org.kde.konsole.Window.loadLayout
    parent()->loadLayout(File);
}

void WindowAdaptor::loadLayoutFile()
{
    // handle method call org.kde.konsole.Window.loadLayoutFile
    parent()->loadLayoutFile();
}

void WindowAdaptor::moveSessionLeft()
{
    // handle method call org.kde.konsole.Window.moveSessionLeft
    parent()->moveSessionLeft();
}

void WindowAdaptor::moveSessionRight()
{
    // handle method call org.kde.konsole.Window.moveSessionRight
    parent()->moveSessionRight();
}

bool WindowAdaptor::moveSplitter(int splitterId, int targetSplitterId, int idx)
{
    // handle method call org.kde.konsole.Window.moveSplitter
    return parent()->moveSplitter(splitterId, targetSplitterId, idx);
}

bool WindowAdaptor::moveView(int viewId, int targetSplitterId, int idx)
{
    // handle method call org.kde.konsole.Window.moveView
    return parent()->moveView(viewId, targetSplitterId, idx);
}

int WindowAdaptor::newSession(const QString &profile, const QString &directory)
{
    // handle method call org.kde.konsole.Window.newSession
    return parent()->newSession(profile, directory);
}

int WindowAdaptor::newSession(const QString &profile)
{
    // handle method call org.kde.konsole.Window.newSession
    return parent()->newSession(profile);
}

int WindowAdaptor::newSession()
{
    // handle method call org.kde.konsole.Window.newSession
    return parent()->newSession();
}

void WindowAdaptor::nextSession()
{
    // handle method call org.kde.konsole.Window.nextSession
    parent()->nextSession();
}

void WindowAdaptor::prevSession()
{
    // handle method call org.kde.konsole.Window.prevSession
    parent()->prevSession();
}

QStringList WindowAdaptor::profileList()
{
    // handle method call org.kde.konsole.Window.profileList
    return parent()->profileList();
}

bool WindowAdaptor::resizeSplits(int splitterId, const QList<double> &percentages)
{
    // handle method call org.kde.konsole.Window.resizeSplits
    return parent()->resizeSplits(splitterId, percentages);
}

void WindowAdaptor::saveLayoutFile()
{
    // handle method call org.kde.konsole.Window.saveLayoutFile
    parent()->saveLayoutFile();
}

int WindowAdaptor::sessionCount()
{
    // handle method call org.kde.konsole.Window.sessionCount
    return parent()->sessionCount();
}

QStringList WindowAdaptor::sessionList()
{
    // handle method call org.kde.konsole.Window.sessionList
    return parent()->sessionList();
}

void WindowAdaptor::setCurrentSession(int sessionId)
{
    // handle method call org.kde.konsole.Window.setCurrentSession
    parent()->setCurrentSession(sessionId);
}

bool WindowAdaptor::setCurrentView(int viewId)
{
    // handle method call org.kde.konsole.Window.setCurrentView
    return parent()->setCurrentView(viewId);
}

void WindowAdaptor::setDefaultProfile(const QString &profile)
{
    // handle method call org.kde.konsole.Window.setDefaultProfile
    parent()->setDefaultProfile(profile);
}

void WindowAdaptor::setTabWidthToText(bool in0)
{
    // handle method call org.kde.konsole.Window.setTabWidthToText
    parent()->setTabWidthToText(in0);
}

QStringList WindowAdaptor::viewHierarchy()
{
    // handle method call org.kde.konsole.Window.viewHierarchy
    return parent()->viewHierarchy();
}


#include "moc_windowadaptor.cpp"
