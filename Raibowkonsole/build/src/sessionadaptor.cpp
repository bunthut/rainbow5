/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Source file was org.kde.konsole.Session.xml
 *
 * qdbusxml2cpp is Copyright (C) The Qt Company Ltd. and other contributors.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "sessionadaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class SessionAdaptor
 */

SessionAdaptor::SessionAdaptor(Konsole::Session *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

SessionAdaptor::~SessionAdaptor()
{
    // destructor
}

QString SessionAdaptor::activationToken(const QString &cookieForRequest)
{
    // handle method call org.kde.konsole.Session.activationToken
    return parent()->activationToken(cookieForRequest);
}

QByteArray SessionAdaptor::codec()
{
    // handle method call org.kde.konsole.Session.codec
    return parent()->codec();
}

bool SessionAdaptor::copyInputToAllSessions()
{
    // handle method call org.kde.konsole.Session.copyInputToAllSessions
    return parent()->copyInputToAllSessions();
}

bool SessionAdaptor::copyInputToNone()
{
    // handle method call org.kde.konsole.Session.copyInputToNone
    return parent()->copyInputToNone();
}

bool SessionAdaptor::copyInputToSessions(const QList<int> &sessions)
{
    // handle method call org.kde.konsole.Session.copyInputToSessions
    return parent()->copyInputToSessions(sessions);
}

QList<int> SessionAdaptor::copyingSessions()
{
    // handle method call org.kde.konsole.Session.copyingSessions
    return parent()->copyingSessions();
}

QStringList SessionAdaptor::environment()
{
    // handle method call org.kde.konsole.Session.environment
    return parent()->environment();
}

QList<int> SessionAdaptor::feederSessions()
{
    // handle method call org.kde.konsole.Session.feederSessions
    return parent()->feederSessions();
}

bool SessionAdaptor::flowControlEnabled()
{
    // handle method call org.kde.konsole.Session.flowControlEnabled
    return parent()->flowControlEnabled();
}

int SessionAdaptor::foregroundProcessId()
{
    // handle method call org.kde.konsole.Session.foregroundProcessId
    return parent()->foregroundProcessId();
}

QString SessionAdaptor::getAllDisplayedText()
{
    // handle method call org.kde.konsole.Session.getAllDisplayedText
    return parent()->getAllDisplayedText();
}

QString SessionAdaptor::getAllDisplayedText(bool removeTrailingEmptyLines)
{
    // handle method call org.kde.konsole.Session.getAllDisplayedText
    return parent()->getAllDisplayedText(removeTrailingEmptyLines);
}

QStringList SessionAdaptor::getAllDisplayedTextList()
{
    // handle method call org.kde.konsole.Session.getAllDisplayedTextList
    return parent()->getAllDisplayedTextList();
}

QStringList SessionAdaptor::getAllDisplayedTextList(bool removeTrailingEmptyLines)
{
    // handle method call org.kde.konsole.Session.getAllDisplayedTextList
    return parent()->getAllDisplayedTextList(removeTrailingEmptyLines);
}

QString SessionAdaptor::getDisplayedText(int startLineOffset, int endLineOffset)
{
    // handle method call org.kde.konsole.Session.getDisplayedText
    return parent()->getDisplayedText(startLineOffset, endLineOffset);
}

QStringList SessionAdaptor::getDisplayedTextList(int startLineOffset, int endLineOffset)
{
    // handle method call org.kde.konsole.Session.getDisplayedTextList
    return parent()->getDisplayedTextList(startLineOffset, endLineOffset);
}

int SessionAdaptor::historySize()
{
    // handle method call org.kde.konsole.Session.historySize
    return parent()->historySize();
}

bool SessionAdaptor::isMonitorActivity()
{
    // handle method call org.kde.konsole.Session.isMonitorActivity
    return parent()->isMonitorActivity();
}

bool SessionAdaptor::isMonitorPrompt()
{
    // handle method call org.kde.konsole.Session.isMonitorPrompt
    return parent()->isMonitorPrompt();
}

bool SessionAdaptor::isMonitorSilence()
{
    // handle method call org.kde.konsole.Session.isMonitorSilence
    return parent()->isMonitorSilence();
}

int SessionAdaptor::processId()
{
    // handle method call org.kde.konsole.Session.processId
    return parent()->processId();
}

QString SessionAdaptor::profile()
{
    // handle method call org.kde.konsole.Session.profile
    return parent()->profile();
}

void SessionAdaptor::runCommand(const QString &command)
{
    // handle method call org.kde.konsole.Session.runCommand
    parent()->runCommand(command);
}

void SessionAdaptor::sendMouseEvent(int buttons, int column, int line, int eventType)
{
    // handle method call org.kde.konsole.Session.sendMouseEvent
    parent()->sendMouseEvent(buttons, column, line, eventType);
}

void SessionAdaptor::sendText(const QString &text)
{
    // handle method call org.kde.konsole.Session.sendText
    parent()->sendText(text);
}

bool SessionAdaptor::setCodec(const QByteArray &name)
{
    // handle method call org.kde.konsole.Session.setCodec
    return parent()->setCodec(name);
}

void SessionAdaptor::setEnvironment(const QStringList &environment)
{
    // handle method call org.kde.konsole.Session.setEnvironment
    parent()->setEnvironment(environment);
}

void SessionAdaptor::setFlowControlEnabled(bool enabled)
{
    // handle method call org.kde.konsole.Session.setFlowControlEnabled
    parent()->setFlowControlEnabled(enabled);
}

void SessionAdaptor::setHistorySize(int lines)
{
    // handle method call org.kde.konsole.Session.setHistorySize
    parent()->setHistorySize(lines);
}

void SessionAdaptor::setMonitorActivity(bool in0)
{
    // handle method call org.kde.konsole.Session.setMonitorActivity
    parent()->setMonitorActivity(in0);
}

void SessionAdaptor::setMonitorPrompt(bool in0)
{
    // handle method call org.kde.konsole.Session.setMonitorPrompt
    parent()->setMonitorPrompt(in0);
}

void SessionAdaptor::setMonitorSilence(bool in0)
{
    // handle method call org.kde.konsole.Session.setMonitorSilence
    parent()->setMonitorSilence(in0);
}

void SessionAdaptor::setMonitorSilenceSeconds(int seconds)
{
    // handle method call org.kde.konsole.Session.setMonitorSilenceSeconds
    parent()->setMonitorSilenceSeconds(seconds);
}

void SessionAdaptor::setProfile(const QString &profileName)
{
    // handle method call org.kde.konsole.Session.setProfile
    parent()->setProfile(profileName);
}

void SessionAdaptor::setTabTitleFormat(int context, const QString &format)
{
    // handle method call org.kde.konsole.Session.setTabTitleFormat
    parent()->setTabTitleFormat(context, format);
}

void SessionAdaptor::setTitle(int role, const QString &title)
{
    // handle method call org.kde.konsole.Session.setTitle
    parent()->setTitle(role, title);
}

QString SessionAdaptor::shellSessionId()
{
    // handle method call org.kde.konsole.Session.shellSessionId
    return parent()->shellSessionId();
}

QString SessionAdaptor::tabTitleFormat(int context)
{
    // handle method call org.kde.konsole.Session.tabTitleFormat
    return parent()->tabTitleFormat(context);
}

QString SessionAdaptor::title(int role)
{
    // handle method call org.kde.konsole.Session.title
    return parent()->title(role);
}


#include "moc_sessionadaptor.cpp"
